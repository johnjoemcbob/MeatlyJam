//
//  StaticBlinnPerVertexDirectional.csshader
//  Chilli Source
//  Created by I Copland on 29/01/2014.
//
//  The MIT License (MIT)
//
//  Copyright (c) 2014 Tag Games Limited
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

GLSL
{
	VertexShader
	{
		#ifndef GL_ES
		#define lowp
		#define mediump
		#define highp
		#endif


		//attributes
		attribute highp vec4 a_position;
		attribute mediump vec3 a_normal;
		attribute mediump vec2 a_texCoord;

		//uniforms
		uniform highp mat4 u_lightMat;
		uniform mediump vec3 u_lightDir;
		uniform lowp vec4 u_lightCol;

		uniform highp mat4 u_wvpMat;
		uniform highp mat4 u_worldMat;
		uniform highp mat4 u_normalMat;

		uniform lowp vec4 u_diffuse;
		uniform lowp vec4 u_specular;

		uniform highp vec3 u_cameraPos;

		//varyings
		varying lowp vec4 vvColour;
		varying mediump vec2 vvTexCoord;

		void main()
		{
		    //Convert the vertex from local space to projection
		    gl_Position = u_wvpMat * a_position;
		    vec4 vWorldPosition = u_worldMat * a_position;

		    // Calculate normal in world space
		    vec3 vWorldNormal = normalize((u_normalMat*vec4((a_normal), 1.0)).xyz);

		    vec3 vVertexToEye = normalize(u_cameraPos - vWorldPosition.xyz);
		    vec3 vHalfVector = normalize(-u_lightDir + vVertexToEye);

		    //calculate the diffuse colour
		    float fNdotL = max(dot(vWorldNormal, -u_lightDir), 0.0);
		    vec4 vDiffuse = u_lightCol * fNdotL;

		    //calculate the specular colour
		    float fNdotHV = max(dot(vWorldNormal, vHalfVector), 0.0);
		    float fLightSwitch = step(0.001, fNdotL);
		    vec4 vSpecular = vec4(u_specular.xyz * pow(fNdotHV, 1.0/max(u_specular.a, 0.01)) * fLightSwitch, 1.0);

		    //get the tex coord
		    vvTexCoord = a_texCoord;

		    vvColour = (vDiffuse + vSpecular) * u_lightCol;
		}
	}
	
	FragmentShader
	{
		#ifndef GL_ES
		#define lowp
		#define mediump
		#define highp
		#else
		precision lowp float;
		#endif

		//uniforms
		uniform lowp sampler2D u_texture0;

		//varyings
		varying mediump vec2 vvTexCoord;
		varying lowp vec4 vvColour;

		void main()
		{
			gl_FragColor = vvColour * texture2D(u_texture0, vvTexCoord);
		}
	}
}